//------------------------------------------------------------------------------
//   _____       _               _   _           _      _________________
//  /  __ \     | |             | \ | |         | |    /  ___|  _  \  _  \
//  | /  \/ __ _| |__  _ __ __ _|  \| | ___   __| | ___\ `--.| | | | | | |
//  | |    / _` | '_ \| '__/ _` | . ` |/ _ \ / _` |/ _ \`--. \ | | | | | |
//  | \__/\ (_| | |_) | | | (_| | |\  | (_) | (_| |  __/\__/ / |/ /| |/ /
//   \____/\__,_|_.__/|_|  \__,_\_| \_/\___/ \__,_|\___\____/|___/ |___/
//
// Cabra Node salle de bain la Ch√®vre ....
//
// Author  : chevalir
// version : ExtV3
//------------------------------------------------------------------------------
/*
 http://patorjk.com/software/taag/#p=display&v=3&c=c%2B%2B&f=Doom&t=TypeHere
*/
#include <Arduino.h>
#include "DHT.h"

////////////////////////////////////////////////////////////////////////////////
#include "Arduidom_Radio.h"
#include <EEPROMex.h>

// DEBUG LEVEL
#define LOG 1
#define LOG_DEBUG 1
#define LOG_INFO 1
#define LOG_WARNING 1


#define NDSPROBE 1 // Number of DS18B20 connected to
#define NDHT 1 // Number of DHT22 connected to
#define DHTTYPE DHT22
const unsigned int READ_ERROR = 9999;


// GLOBAL constantes
const byte PROBE_ID = 6; // ID of probe beetween 0 and 15
const byte DEVICE_STATE_ID = 5; // first state identifier added to devine number  




// PIN constantes
const byte RFRX_PIN = 2; 		  // RF433 receiver
const byte BT_LEARN_PIN = 3;      // BUTTONS LEARN
const byte BT_VMC_PIN = 12;      
const byte BT_LIGHT_PIN = 10;
const byte BT_MIRROR_PIN = 13;
const byte BT_WC = 11;
const byte RFTX_PIN = 8; 		  // D7 or D8 depend of the probe RF433 transmiter
const byte DHT_PIN = 9;           // DTH 22 Probe
const byte ONEWIRE_PIN = A1     // DS18B20 temperature probe.
const byte LED_PIN = A4; 
const byte RS_VMC_PIN =4 ; 	  // RELAIS IN1
const byte RS_LIGHT_PIN = 5;   // RELAUF IN2
const byte RS_MIRROR_PIN = 6;  // RELAIS IN3
const byte RS_WC_LIGHT_PIN = 7; // RELAIS IN4
const int LEARN_DELAY = 10000;

// RADIO RF 433
const byte RADIO_REPEATS = 5; // Nombre de repetitions des messages Radio 
const long HE_IDE = 19940334; // default HomeEasy ID ( ID od DIO REF:54791 ;) )
const byte HE_IDE_OFFSET = 4; // To be sure to use free HomeEasy ID receptor 


const byte NB_BUTTON = 5; // Total number of button
const byte NB_DEVICE = 4; // Total number of device

const byte DELAY_REBOUND = 50;

const byte VMC = 0; // VMC table index
const byte LIGHT = 1; // Ligth table index
const byte MIRROR = 2; // mirror light table index
const byte WC = 3; // WC table index
const byte LEARN = 4; // Learn table index
const byte MAXREMOTE = 3; // Max registered remote per device

//  RCSwitch lib initialisation
RCSwitch mySwitch = RCSwitch();

// HomeEasy protocole variable
unsigned long senderID = 0;
unsigned long RFData = 0; // Valeur du Data Recu par 433
unsigned long RFDataLastSend = 0; // Valeur du Data Recu par 433
unsigned long RFAddr = 0; // Valeur de l'addresse de l'emmeteur 433
unsigned long RFAddrLastSend = 0; // Valeur de l'addresse de l'emmeteur 433
bool RFGroup = false;
byte RFOnOff = 0;
int RFDevice = 0;
bool timeToLearn = false;

struct config_t {
	char id;
	byte version;
};

int addrConfig;
config_t theConfig;

struct registeredRemote_t {
	byte totalRegistered;
	byte lastRegistered;
};
int addrRemoteIndex;
registeredRemote_t registeredList[NB_DEVICE]; // Array of registered remote indexes

struct remote_t {
	long sender;
	int receptor;
};
int remoteAddr[NB_DEVICE]; // array of addresse of remote_t list

remote_t remoteVMC[MAXREMOTE];   // list of registered remote for VMC
remote_t remoteLight[MAXREMOTE]; // list of registered remote for Light
remote_t remoteMirror[MAXREMOTE];// list of registered remote for VMC
remote_t remoteWC[MAXREMOTE];// list of registered remote for VMC
remote_t* remoteList[NB_DEVICE];

// DHT initialisation
#if (NDHT > 0)
DHT dhtprobe(DHT_PIN, DHTTYPE);
float dhtTemp[NDHT];
float dhtHumidity[NDHT];
const byte RETRY_MAX = 10;
#endif

// Dallas DS18B20 temperature sensor bus init
#if (NDSPROBE > 0)
#include <OneWire.h>
#include <DallasTemperature.h>

OneWire oneWire(ONEWIRE_PIN);
DallasTemperature sensors(&oneWire);
int LastDSValue[NPROBE];
#endif



unsigned long tempLastSend = 0 ;
unsigned long sleeploop = 15; // frequency to send temperatures, in minutes
bool itsTimeToSend = true;
bool itsTimeForTemp = false;
// Command group
// 0 = inputPin, 1

byte buttonPins [NB_BUTTON];
byte buttonLastState [NB_BUTTON];
byte buttonState [NB_BUTTON];
byte devicePin [NB_DEVICE];
byte deviceState [NB_DEVICE];
byte nbTemperatureSensor = 0;


//            _
//           | |
//   ___  ___| |_ _   _ _ __
//  / __|/ _ \ __| | | | '_ \
//  \__ \  __/ |_| |_| | |_) |
//  |___/\___|\__|\__,_| .__/
//                     | |
//                     |_|
void setup() {
	#if defined(LOG)	
	Serial.begin(115200); // Init du Port serie/USB
	logBuildVersion();
	#endif
	sleeploop *= 60000; // convert Minute to millis
	sleeploop *= 10000; // convert Minute to millis

	// setup variable table
	buttonPins [LEARN] = BT_LEARN_PIN;	
	buttonPins [VMC] = BT_VMC_PIN;
	buttonPins [LIGHT] = BT_LIGHT_PIN;
	buttonPins [MIRROR] = BT_MIRROR_PIN;
	buttonPins [WC] = BT_WC;
	

	for (int i=0; i < NB_BUTTON; i++) {
		pinMode(buttonPins[i], INPUT_PULLUP);
		buttonState[i] = digitalRead(buttonPins[i]);
		buttonLastState[i] = buttonState[i];
	    #if defined (LOG_INFO)		
		Serial.print(String(buttonPins[i]) + " ");
		#endif
	}
    #if defined (LOG_INFO)		
	Serial.println(" :INPUT" );
	#endif

	devicePin [VMC] = RS_VMC_PIN;
	devicePin [LIGHT] = RS_LIGHT_PIN;
	devicePin [MIRROR] = RS_MIRROR_PIN;
	devicePin [WC] = RS_WC_LIGHT_PIN;
	
	for (int i=0; i<NB_DEVICE; i++) {
		
		pinMode(devicePin[i], OUTPUT);
		deviceState[i] = HIGH;
		digitalWrite(devicePin[i], HIGH);
		
	    #if defined (LOG_INFO)		
		Serial.print(String(devicePin[i]) + " ");
		#endif
	}
    #if defined (LOG_INFO)		
	Serial.println(" :OUTPUT" );
	#endif


	//clearMemory();
	setupMemory();
	reloadMemory();
	// for (int i=0; i < NB_DEVICE; i++ ) reloadMemory(i);
	initMemory('R', 101); // Version Beta 1.0.1

	// setup rcSwitch to transmit and receive RF433
	pinMode(RFRX_PIN, INPUT);
	mySwitch.enableReceive(RFRX_PIN-2);
	
	pinMode(RFTX_PIN, OUTPUT);
	mySwitch.enableTransmit(RFTX_PIN); // Transmission sur Pin
	mySwitch.setRepeatTransmit(RADIO_REPEATS); // Repete x fois le message
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------
	delay(1000);

	#if (NDSPROBE > 0)
	sensors.begin();
	nbTemperatureSensor = sensors.getDeviceCount();
	#if defined(LOG_INFO)		
	Serial.println("Nb Temp Sensor : "+ String(nbTemperatureSensor, DEC));
	#endif
	// just to avoid probleme with some sensor where the first value returned is not correct
	for (int ploop = 0 ; ploop < NDSPROBE; ploop++) {
		updateTemperature(ploop);
	}
	#endif
	#if (NDHT > 0)	
	dhtprobe.begin();
	#endif


	#if defined(LED_PIN)
	pinMode(LED_PIN, OUTPUT);	
	blinkLed(2, 10);
	#endif

	// Start
	#if defined(LOG_INFO)		
	Serial.println("start main loop");
	#endif

} // End Of void setup()


//                   _         _
//                  (_)       | |
//   _ __ ___   __ _ _ _ __   | |     ___   ___  _ __
//  | '_ ` _ \ / _` | | '_ \  | |    / _ \ / _ \| '_ \
//  | | | | | | (_| | | | | | | |___| (_) | (_) | |_) |
//  |_| |_| |_|\__,_|_|_| |_| \_____/\___/ \___/| .__/
//                                              | |
//

void loop(){
	if ( itsTimeToSend || itsTimeForTemp){
		sendAllProbeValues(itsTimeForTemp);
		tempLastSend = millis();
		itsTimeForTemp = ! itsTimeForTemp;
	}

	for (int i=0; i < NB_BUTTON; i++) {
		manageInput(i);
	}
	if (mySwitch.available() && isMessage()) {
		remoteAction();
	}
	itsTimeToSend = (millis() - tempLastSend) > sleeploop;
}

//   _     _       _    _              _
//  | |   (_)     | |  | |            | |
//  | |__  _ _ __ | | _| |     ___  __| |
//  | '_ \| | '_ \| |/ / |    / _ \/ _` |
//  | |_) | | | | |   <| |___|  __/ (_| |
//  |_.__/|_|_| |_|_|\_\_____/\___|\__,_|
//
//
void blinkLed(int repeat, int time) {
	for (int i = 0; i < repeat; i++) {
		delay(time);
		digitalWrite(LED_PIN, HIGH);
		delay(time);
		digitalWrite(LED_PIN, LOW);
	}
}


//   _____                  _
//  |_   _|                | |
//    | | _ __  _ __  _   _| |_
//    | || '_ \| '_ \| | | | __|
//   _| || | | | |_) | |_| | |_
//   \___/_| |_| .__/ \__,_|\__|
//             | |
//             |_|

void manageInput(byte aDevice) {
	buttonState[aDevice] = digitalRead(buttonPins[aDevice]);
	if (buttonState[aDevice] != buttonLastState[aDevice]) {
		#if defined (LOG_INFO)
		Serial.println(" BUTTON " + String(buttonPins[aDevice]));
		#endif
		buttonLastState[aDevice] = buttonState[aDevice];
		doAction(aDevice, !deviceState[aDevice]);
		delay(DELAY_REBOUND);
	} 
}

/*******************************************************************************
*******************************************************************************/
void remoteAction() {
	// VMC
	for ( int i=0; i < MAXREMOTE; i++ ) {
		if (i < registeredList[VMC].totalRegistered
		        && RFData == remoteVMC[i].sender && RFDevice == remoteVMC[i].receptor) {
			#if defined (LOG_DEBUG)
			Serial.println("Its for ME , the VMC:");
			#endif
			doAction(VMC, ! RFOnOff);
		}
		if (i < registeredList[LIGHT].totalRegistered
		        && RFData == remoteLight[i].sender && RFDevice == remoteLight[i].receptor) {
			#if defined (LOG_DEBUG)
			Serial.println("Its for ME , the LIGHT:");
			#endif		
			doAction(LIGHT, ! RFOnOff);
		}
		if (i < registeredList[MIRROR].totalRegistered
		        && RFData == remoteMirror[i].sender && RFDevice == remoteMirror[i].receptor) {
			#if defined (LOG_DEBUG)
			Serial.println("Its for ME , the MIRROR:");
			#endif		
			doAction(MIRROR, ! RFOnOff);
		}
		if (i < registeredList[WC].totalRegistered
		        && RFData == remoteWC[i].sender && RFDevice == remoteWC[i].receptor) {
			#if defined (LOG_DEBUG)
			Serial.println("Its for ME , the WC LIGHT:");
			#endif		
			doAction(WC, ! RFOnOff);
		}
	}
}

//      | |      / _ \     | | (_)            
//    __| | ___ / /_\ \ ___| |_ _  ___  _ __  
//   / _` |/ _ \|  _  |/ __| __| |/ _ \| '_ \ 
//  | (_| | (_) | | | | (__| |_| | (_) | | | |
//   \__,_|\___/\_| |_/\___|\__|_|\___/|_| |_|
//                                            
void doAction(byte aDevice, bool state) {
	switch (aDevice) {
	case LEARN:
		learnRF();
		buttonLastState[LEARN] = HIGH; // default value of the press button
		break;
		
	default:
		deviceState[aDevice] = state;
		digitalWrite(devicePin [aDevice], state );
		#if defined (LOG_DEBUG)
		Serial.println("Device " + String(aDevice) + " new state = " + String(state, DEC));
		blinkLed(3, 75); // allow arduidom to manage original RF message
		send2RF(true , aDevice + DEVICE_STATE_ID , !state, PROBE_ID, false);
		#endif		
		break;
	}
}


//   _____                                   _
//  |_   _|                                 | |
//    | | ___ _ __ ___  _ __   ___ _ __ __ _| |_ _   _ _ __ ___
//    | |/ _ \ '_ ` _ \| '_ \ / _ \ '__/ _` | __| | | | '__/ _ \
//    | |  __/ | | | | | |_) |  __/ | | (_| | |_| |_| | | |  __/
//    \_/\___|_| |_| |_| .__/ \___|_|  \__,_|\__|\__,_|_|  \___|
//                     | |
//                     |_|
void sendAllProbeValues(boolean sendTemp) {
	//@@TODO send only if change 
	
	#if defined (LOG_DEBUG)
	Serial.print("Its time to send probe, sendTemp ="); Serial.print(sendTemp);
	#endif
	byte totalValue = NDSPROBE + 2*NDHT;
	
	#if (NDHT > 0)
	if ( sendTemp ) {
		int vdht = getDHT22Temperature();
		sendProbeValue(0, vdht, true);
	} else { 
		int vdht = getDHT22Humidity();
		sendProbeValue(1, vdht, true);
	}
	#endif
	
	#if (NDSPROBE > 0)
	for ( int ploop = 2; ploop < totalValue; ploop++) {
		int tempValue = getDSTemperature(ploop);
		sendProbeValue(ploop, tempValue, true);
	}
	#endif
}

/*******************************************************************************
*******************************************************************************/
#if (NDSPROBE > 0)
float getDSTemperature(byte probeNum) {
	// *** MORE THAN ONE RETURN ****
	float rawValue = nan;
	if ( nbTemperatureSensor > probeNum ) {
		sensors.requestTemperatures();
		rawValue = sensors.getTempCByIndex(probeNum);
	} 
	#if defined(LOG_INFO)		
	Serial.println(">>Probe sensor not connected");
	#endif
	
	if ( isnan(rawValue)  || rawValue < -10 || rawValue == 85 ) {
		return READ_ERROR;
	}
	return rawValue*100;
}
#endif

#if (NDHT > 0)
/*******************************************************************************
*******************************************************************************/
int getDHT22Temperature() {
	// Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
    float rawValue = dhtprobe.readTemperature();
	byte retry = 0;
	while ( isnan(rawValue) && retry < RETRY_MAX) {
		delay(100);
		#if defined(LOG_WARNING)		
		Serial.print("Error during DHT readTemperature() retry"); 
		#endif
		rawValue = dhtprobe.readTemperature();
	}
	#if defined(LOG_INFO)		
	Serial.print("DHT Pin:"); Serial.print(DHT_PIN);
	Serial.print(" t:"); Serial.print(rawValue);
	#endif
	
	if (isnan(rawValue)) {
		return READ_ERROR;
	}
	return rawValue*100;
}

/*******************************************************************************
*******************************************************************************/
int getDHT22Humidity() {
	// Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
    float rawValue = dhtprobe.readHumidity();
	byte retry = 0;
	while ( isnan(rawValue) && retry < RETRY_MAX) {
		delay(100);
		#if defined(LOG_WARNING)		
		Serial.print("Error during DHT readTemperature() retry"); 
		#endif
		rawValue = dhtprobe.readHumidity();
	}
	#if defined(LOG_INFO)		
	Serial.print("DHT Pin:"); Serial.print(DHT_PIN);
	Serial.print(" t:"); Serial.print(rawValue);
	#endif
	
	if (isnan(rawValue)) {
		return READ_ERROR;
	}
	return rawValue*100;
}
#endif

void sendProbeValue( byte aProbeNum, int aValue, bool aSend ) {
	int decValueD;
	bool positive = aValue > 0;
	int tempValue;
	#if defined(LOG_INFO)	
	Serial.print(">>Probe:" ); Serial.print(aProbeNum);
	Serial.print(" value:"); Serial.println(aValue, DEC);	
	#endif

	// bad values returned by the sensor >-10 or 85
	if ( aValue == READ_ERROR ) {
		#if defined(LOG_INFO)		
		Serial.println(">>Probe sensor Error");
		#endif
		tempValue = 0;
		decValueD = 0;
		positive = false;
	} else {
		// arround calculation  ex aValue = 1935 -->  19.4
		tempValue = aValue / 100; // remove decimal part tempValue = 19
	    decValueD = (aValue - tempValue*100)/10; // decValueD (1935 - 1900)/10 = 3
	    // decValueD= 3   tempValue = 19 -> now 
		int decValueU = aValue - (tempValue*100) - (decValueD*10) ; // 1935 - 19*100 - 3*10
		if (decValueU > 4) {
			++decValueD;
		}
	}
	// return temperature to -0 in case of error
	#if defined(LOG_INFO)		
	//Serial.print("Probe sensor Value "); Serial.println( aValue, DEC);
	Serial.print(" ProbeID=" ); Serial.print( PROBE_ID+aProbeNum, DEC);
	Serial.print(" value = " ); 
	Serial.print( tempValue); Serial.print( "."); Serial.print(decValueD);
	Serial.print( " Signe = " ); Serial.println( positive, DEC);
	#endif
	if ( aSend ) {
		send2RF(false , tempValue, decValueD, PROBE_ID+aProbeNum, positive);
	}

}



//  ______          _ _           ___  _____  _____
//  | ___ \        | (_)         /   ||____ ||____ |
//  | |_/ /__ _  __| |_  ___    / /| |    / /    / /
//  |    // _` |/ _` | |/ _ \  / /_| |    \ \    \ \
//  | |\ \ (_| | (_| | | (_) | \___  |.___/ /.___/ /
//  \_| \_\__,_|\__,_|_|\___/      |_/\____/ \____/

bool isMessage() {
	bool ret = false;
	RFData = mySwitch.getReceivedValue();
	RFAddr = mySwitch.getReceivedAddr();

	if ( RFDataLastSend != RFData || RFAddrLastSend != RFAddr ) {
		Serial.println(F("MySwitch available"));
		RFDataLastSend = RFData;
		RFAddrLastSend = RFAddr;
		RFGroup = RFAddr > 999;
		if (RFGroup) {
			RFAddr -= 1000;
		}
		RFDevice =  RFAddr % 100;
		RFOnOff = (RFAddr - RFDevice) / 100;

		#if defined(LOG_INFO)
		Serial.print(">>RF S:");Serial.print(RFDataLastSend);
		// Serial.print(" A:");Serial.print(RFAddrLastSend);
		if (RFGroup > 0) { Serial.print(" G:");Serial.print(RFGroup); }
		Serial.print(" R:");Serial.print(RFDevice);
		Serial.print(" O:");Serial.print(RFOnOff);
		Serial.println("<<");
        #endif
		ret = true;
	}

	mySwitch.resetAvailable();
	return ret;
}

/*******************************************************************************
*******************************************************************************/
void learnRF() {
	
	//@@TODO Manage unregister request.
	
	byte press = 0;
	bool reset = false;
	Serial.println("Start Learn wait" );
	blinkLed(5, 200);

	digitalWrite(LED_PIN, HIGH);
	while (digitalRead(buttonPins[LEARN]) == LOW) {}
	#if defined (LOG_DEBUG)
	Serial.println("Start Learn ready" );
	#endif
	unsigned long initStartTimeMillis = millis();
	unsigned long currentTimeMillis = initStartTimeMillis;
	buttonLastState[LEARN] = HIGH;
	while ( (millis() - initStartTimeMillis) < 5000 ) {
		buttonState[LEARN] = digitalRead(buttonPins[LEARN]);
		if ( ( buttonState[LEARN] != buttonLastState[LEARN] )
		        && ( buttonState[LEARN] == LOW ) ) {
			press++;
			digitalWrite(LED_PIN, LOW);
			initStartTimeMillis = millis();
			delay(300);
			digitalWrite(LED_PIN, HIGH);
		}
		delay(DELAY_REBOUND);
		buttonLastState[LEARN] = buttonState[LEARN];
	}


	delay(1000);
	if (digitalRead(buttonPins[LEARN]) == LOW) {
		blinkLed(2, 10);
		digitalWrite(LED_PIN, HIGH);
		press--;
		#if defined (LOG_DEBUG)
		Serial.println("Start Learn device = RESET " + String(press));
		#endif
		reset = true;
		reloadMemory(press);
		return; //  MORE THAN ONE RETURN 
	}
	
	if (press > 0) {
		press--;	
		Serial.println("Start Learn device = " + String(press, DEC));
		press = press > NB_DEVICE  ? NB_DEVICE : press;
	
		digitalWrite(LED_PIN, LOW);
	
		initStartTimeMillis = millis();
		currentTimeMillis = initStartTimeMillis;
		while ( (currentTimeMillis - initStartTimeMillis) < LEARN_DELAY ) {
			if (mySwitch.available() && isMessage()) {
				if ( registeredList[press].lastRegistered ==  MAXREMOTE ) {
					registeredList[press].lastRegistered = 1;// on revient au 1er
					Serial.println("Memory full, back to 1");
				} else {
					registeredList[press].lastRegistered++;
				}
				if (registeredList[press].lastRegistered > registeredList[press].totalRegistered ) {
					registeredList[press].totalRegistered++;
				}
	
				remoteList[press][ registeredList[press].lastRegistered -1 ].sender = RFData;
				remoteList[press][ registeredList[press].lastRegistered -1 ].receptor = RFDevice;
	
				EEPROM.writeBlock(remoteAddr[press], remoteList[press],  MAXREMOTE);
				digitalWrite(LED_PIN, LOW);
				#if defined (LOG_DEBUG)				
				Serial.print("enregistrement du signal # ");
				Serial.println(registeredList[press].lastRegistered -1);
				#endif
				delay(300);
				digitalWrite(LED_PIN, HIGH);
	
				// set register index for the next time
				EEPROM.writeBlock(addrRemoteIndex, registeredList, NB_DEVICE);
	
			}
			currentTimeMillis = millis();
	
		}
	}
	blinkLed(5, 200);
	#if defined (LOG_DEBUG)				
	Serial.println("End Init");
	#endif

}

//                      _  _____ ____________
//                     | |/ __  \| ___ \  ___|
//   ___  ___ _ __   __| |`' / /'| |_/ / |_
//  / __|/ _ \ '_ \ / _` |  / /  |    /|  _|
//  \__ \  __/ | | | (_| |./ /___| |\ \| |
//  |___/\___|_| |_|\__,_|\_____/\_| \_\_|
//
//

/*******************************************************************************
*******************************************************************************/
void send2RF(boolean aFlagGroup, int aValue, int aDecValue, byte aReceiver, boolean aFlagOnOff ) {
	senderID = 9999000;
	senderID += (aValue*10)+aDecValue;
	#if defined(LOG_INFO)
	Serial.print("senderID: " );
	Serial.println( senderID );
    #endif 
	for (int i = 1; i <= RADIO_REPEATS; i++) {
		mySwitch.send(senderID, aFlagGroup, aReceiver, aFlagOnOff);
	}
}


//  ___  ___
//  |  \/  |
//  | .  . | ___ _ __ ___   ___  _ __ _   _
//  | |\/| |/ _ \ '_ ` _ \ / _ \| '__| | | |
//  | |  | |  __/ | | | | | (_) | |  | |_| |
//  \_|  |_/\___|_| |_| |_|\___/|_|   \__, |
//                                     __/ |
//                                  |___/

/*******************************************************************************
*******************************************************************************/
void reloadMemory() {
	reloadMemory(-1);
}
void reloadMemory(int reset) {
	bool change = false;
	EEPROM.readBlock(addrConfig, theConfig);
	EEPROM.readBlock(addrRemoteIndex, registeredList, NB_DEVICE);
	#if defined(LOG_INFO)		
	Serial.println("totalRegistered \t lastRegistered");
	#endif

	for (int i=0; i < NB_DEVICE ; i++) {
		#if defined(LOG_INFO)				
		Serial.print(registeredList[i].totalRegistered); Serial.print(" \t\t\t ");
		Serial.println(registeredList[i].lastRegistered);
		#endif
		// manage first initialisation
		if (change || registeredList[i].totalRegistered > MAXREMOTE ) {
			registeredList[i].totalRegistered = MAXREMOTE;
			change = true;
		}
		if (change || registeredList[i].lastRegistered > MAXREMOTE ) {
			registeredList[i].lastRegistered = 1;
			change = true;
		}
		#if defined(LOG_INFO)
		if (change) Serial.println("Change required ");
		#endif
	}
	//   *** VMC  ***
	EEPROM.readBlock(remoteAddr[VMC], remoteVMC, MAXREMOTE);
	// manage first initialisation
	if (reset == VMC || change || remoteVMC[0].sender != HE_IDE ) {
		for (int j=1; j < MAXREMOTE; j++ ) {
			remoteVMC[j].sender = 0;
			remoteVMC[j].receptor = 0;
		}
		remoteVMC[0].sender = HE_IDE;
		remoteVMC[0].receptor = VMC+HE_IDE_OFFSET;
		#if defined(LOG_INFO)
		Serial.println("VMC Memory Change required");
		#endif
		registeredList[VMC].totalRegistered = 1;
		registeredList[VMC].lastRegistered = 1;
		EEPROM.updateBlock(remoteAddr[VMC], remoteVMC, MAXREMOTE);
		change = true;
	}
	remoteList[VMC] = remoteVMC;

	EEPROM.readBlock(remoteAddr[LIGHT], remoteLight, MAXREMOTE);
	// manage first initialisation
	if (reset == LIGHT || change || remoteLight[0].sender != HE_IDE ) {
		for (int j=1; j < MAXREMOTE; j++ ) {
			remoteLight[j].sender = 0;
			remoteLight[j].receptor = 0;
		}
		remoteLight[0].sender = HE_IDE;
		remoteLight[0].receptor = LIGHT+HE_IDE_OFFSET;
		#if defined(LOG_INFO)
		Serial.println("LIGHT Memory Change required");
		#endif
		registeredList[LIGHT].totalRegistered = 1;
		registeredList[LIGHT].lastRegistered = 1;

		EEPROM.updateBlock(remoteAddr[LIGHT], remoteLight, MAXREMOTE);
		change = true;
	}
	
	remoteList[LIGHT] = remoteLight;
	
	

	EEPROM.readBlock(remoteAddr[MIRROR], remoteMirror, MAXREMOTE);
	// manage first initialisation
	if (reset == MIRROR || change || remoteMirror[0].sender != HE_IDE ) {
		for (int j=1; j < MAXREMOTE; j++ ) {
			remoteMirror[j].sender = 0;
			remoteMirror[j].receptor = 0;
		}
		remoteMirror[0].sender = HE_IDE;
		remoteMirror[0].receptor = MIRROR+HE_IDE_OFFSET;
		#if defined(LOG_INFO)
		Serial.println("MIRROR Memory Change required");
		#endif
		registeredList[MIRROR].totalRegistered = 1;
		registeredList[MIRROR].lastRegistered = 1;

		EEPROM.updateBlock(remoteAddr[MIRROR], remoteMirror, MAXREMOTE);
		change = true;
	}
	remoteList[MIRROR] = remoteMirror;
	
	EEPROM.readBlock(remoteAddr[WC], remoteWC, MAXREMOTE);
	// manage first initialisation
	if (reset == WC || change || remoteWC[0].sender != HE_IDE ) {
		for (int j=1; j < MAXREMOTE; j++ ) {
			remoteWC[j].sender = 0;
			remoteWC[j].receptor = 0;
		}
		remoteWC[0].sender = HE_IDE;
		remoteWC[0].receptor = WC+HE_IDE_OFFSET;
		#if defined(LOG_INFO)
		Serial.println("WC Memory Change required");
		#endif
		registeredList[WC].totalRegistered = 1;
		registeredList[WC].lastRegistered = 1;

		EEPROM.updateBlock(remoteAddr[WC], remoteWC, MAXREMOTE);
		change = true;
	}
	remoteList[WC] = remoteWC;	

	if (change) EEPROM.updateBlock(addrRemoteIndex, registeredList, NB_DEVICE);
	
	for (int i=0; i < NB_DEVICE ; i++) {
		#if defined (LOG_INFO)			
		Serial.println("   sender \t receptor");
		for (int j=0; j < registeredList[i].totalRegistered; j++ ) {
			Serial.print(remoteList[i][j].sender); Serial.print("\t\t");
			Serial.println(remoteList[i][j].receptor);
		}
		#endif 
	}
}

/*******************************************************************************
*******************************************************************************/
void setupMemory() {
	// setup Memory
	// /!\*********  never change order ********
	addrConfig = EEPROM.getAddress(sizeof(config_t));
	addrRemoteIndex = EEPROM.getAddress(sizeof(registeredRemote_t)*NB_DEVICE);
	remoteAddr[VMC] = EEPROM.getAddress(sizeof(remote_t)*MAXREMOTE);
	remoteAddr[LIGHT] = EEPROM.getAddress(sizeof(remote_t)*MAXREMOTE);
	remoteAddr[MIRROR] = EEPROM.getAddress(sizeof(remote_t)*MAXREMOTE);
	remoteAddr[WC] = EEPROM.getAddress(sizeof(remote_t)*MAXREMOTE);
	#if defined (LOG_INFO)		
	Serial.println("begin address \t\t size");
	Serial.print(addrRemoteIndex);Serial.print(" \t\t\t "); Serial.println(sizeof(registeredRemote_t)*NB_DEVICE);
	Serial.print(remoteAddr[VMC]);Serial.print(" \t\t\t "); Serial.println(sizeof(remote_t)*MAXREMOTE);
	Serial.print(remoteAddr[LIGHT]);Serial.print(" \t\t\t "); Serial.println(sizeof(remote_t)*MAXREMOTE);
	Serial.print(remoteAddr[MIRROR]);Serial.print(" \t\t\t "); Serial.println(sizeof(remote_t)*MAXREMOTE);
	Serial.print(remoteAddr[WC]);Serial.print(" \t\t\t "); Serial.println(sizeof(remote_t)*MAXREMOTE);
    #endif
}



/*******************************************************************************
*******************************************************************************/
void initMemory(char lID, byte lVersion) {
	//  /!\ *** MORE THAN one RETURN
	if (theConfig.id == lID && theConfig.version == lVersion) {
		#if defined(LOG_INFO)		
		Serial.println("initMemory not required ");
		#endif
		return;
	}
	#if defined(LOG_INFO)		
	Serial.println("initMemory to do");
	#endif
	theConfig.id = lID;
	theConfig.version = lVersion;
	EEPROM.writeBlock(addrConfig, theConfig);
}


/*******************************************************************************
*******************************************************************************/
void clearMemory() {

	Serial.println(EEPROMSizeNano);
	Serial.println(EEPROMSizeATmega328);

	/*
	 for (int i = 0 ; i < EEPROM.length() ; i++) {
	   EEPROM.write(i, 0);
	 }
	*/
}


//  ______       _ _     _     ___   _               _
//  | ___ \     (_) |   | |   / / | | |             (_)
//  | |_/ /_   _ _| | __| |  / /| | | | ___ _ __ ___ _  ___  _ __
//  | ___ \ | | | | |/ _` | / / | | | |/ _ \ '__/ __| |/ _ \| '_ \
//  | |_/ / |_| | | | (_| |/ /  \ \_/ /  __/ |  \__ \ | (_) | | | |
//  \____/ \__,_|_|_|\__,_/_/    \___/ \___|_|  |___/_|\___/|_| |_|
//
//

/*******************************************************************************
*******************************************************************************/
#if defined (LOG)
void logBuildVersion (void) {
	String the_path = __FILE__;
	int slash_loc = the_path.lastIndexOf('/');
	String the_cpp_name = the_path.substring(slash_loc+1);
	int dot_loc = the_cpp_name.lastIndexOf('.');
	String the_sketchname = the_cpp_name.substring(0, dot_loc);
	Serial.print("\nSketch: "+the_sketchname);
	Serial.print(" build:");
	Serial.print(__DATE__);
	Serial.print(" / ");
	Serial.print(__TIME__);
	Serial.println("");
	Serial.println("start setup");
}
#endif
// do: CPzzrtyyooiizzzzzzzzzzcczzzzdczzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz

/* memory structure
#define MAXREMOTE 6
byte totalRegistered[NBRELAIS];
byte remoteNumber[
6 remote nbr per devive 






*/
