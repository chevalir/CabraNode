//------------------------------------------------------------------------------
//   _____       _               _   _           _      _________________
//  /  __ \     | |             | \ | |         | |    /  ___|  _  \  _  \
//  | /  \/ __ _| |__  _ __ __ _|  \| | ___   __| | ___\ `--.| | | | | | |
//  | |    / _` | '_ \| '__/ _` | . ` |/ _ \ / _` |/ _ \`--. \ | | | | | |
//  | \__/\ (_| | |_) | | | (_| | |\  | (_) | (_| |  __/\__/ / |/ /| |/ /
//   \____/\__,_|_.__/|_|  \__,_\_| \_/\___/ \__,_|\___\____/|___/ |___/
//
// Cabra Node salle de bain la Chèvre ....
//
// Author  : chevalir
// version : ExtV3
//------------------------------------------------------------------------------
/*
 http://patorjk.com/software/taag/#p=display&v=3&c=c%2B%2B&f=Doom&t=TypeHere
*/
#include <Arduino.h>

////////////////////////////////////////////////////////////////////////////////
#include "Arduidom_Radio.h"
#include <EEPROMex.h>
// #include <TimerOne.h>

// DEBUG LEVEL
#define LOG 1
//#define LOG_DEBUG 1
//#define LOG_INFO 1
//#define LOG_WARNING 1


#define NDSPROBE 0 // Number of DS18B20 connected to
#define NDHT 1 // Number of DHT22 connected to
const unsigned int READ_ERROR = 9999;


// GLOBAL constantes
const byte PROBE_ID = 6; // ID of probe beetween 0 and 15
const byte DEVICE_STATE_ID = 5; // first state identifier added to device number




// PIN constantes
#define RFRX_PIN 2 		  // RF433 receiver
#define BT_LEARN_PIN 3      // BUTTONS LEARN
#define BT_VMC_PIN 12      
#define BT_LIGHT_PIN 10
#define BT_MIRROR_PIN 13
#define BT_WC_PIN 11

#define RFTX_PIN 8 		  // D7 or D8 depend of the probe RF433 transmiter
#define DHT_PIN 9           // DTH 22 Probe
// #define ONEWIRE_PIN A1     // DS18B20 temperature probe.
#define LED_PIN A4 
#define RS_VMC_PIN 4  	  // RELAIS IN1
#define RS_LIGHT_PIN 5   // RELAUF IN2
#define RS_MIRROR_PIN 6  // RELAIS IN3
#define RS_WC_LIGHT_PIN 7 // RELAIS IN4
const int LEARN_DELAY = 10000;

// RADIO RF 433
const byte RADIO_REPEATS = 5; // Nombre de repetitions des messages Radio
const long HE_IDE = 19940334; // default HomeEasy ID ( ID od DIO REF:54791 ;) )
// const byte HE_IDE_OFFSET = 0; // To be sure to use free HomeEasy ID receptor


const byte NB_BUTTON = 5; // Total number of button
const byte NB_DEVICE = 4; // Total number of device

const byte DELAY_REBOUND = 50;

const byte VMC = 0; // VMC table index
const byte LIGHT = 1; // Ligth table index
const byte MIRROR = 2; // mirror light table index
const byte WC = 3; // WC table index
const byte LEARN = 4; // Learn table index
const byte MAXREMOTE = 2; // Max registered remote per device

//  RCSwitch lib initialisation
RCSwitch mySwitch = RCSwitch();

// HomeEasy protocole variable
unsigned long RFLastSender = 0; // Valeur du Data Recu par 433
unsigned long RFLastAddr = 999; // Contains the target Id and the action to do 
								// ON/OFF initialized to "impossible" value 
byte RFOnOff = 0;
byte RFLastReceptor = 0;
bool timeToLearn = false;

struct config_t {
	char id;
	byte version;
};

int addrConfig;
config_t theConfig;

struct registeredRemote_t {
	byte totalRegistered;
	byte lastRegistered;
};
int addrRemoteIndex;
registeredRemote_t registeredList[NB_DEVICE]; // Array of registered remote indexes

struct remote_t {
	long sender;
	byte receptor;
};
int remoteAddr[NB_DEVICE]; // array of addresse of remote_t list

remote_t remoteVMC[MAXREMOTE];   // list of registered remote for VMC
remote_t remoteLight[MAXREMOTE]; // list of registered remote for Light
remote_t remoteMirror[MAXREMOTE];// list of registered remote for VMC
remote_t remoteWC[MAXREMOTE];// list of registered remote for VMC
remote_t* remoteList[NB_DEVICE];

// DHT initialisation
#if (NDHT > 0)
#include "DHT.h"
DHT dhtprobe(DHT_PIN, DHT22);
// byte tempDHT = 0;
// byte humiDHT = 1;
int lastValue[2] = {-99, -99}; // last temperature and humidity vales sent
byte skeepCount[2] = {0,0};  // count send skeeped due to no change
int gapMin[2] = {10, 100}; // 10 for 0.1°C, and 100 for 1%
#endif

// Dallas DS18B20 temperature sensor bus init
#if (NDSPROBE > 0)
#include <OneWire.h>
#include <DallasTemperature.h>

OneWire oneWire(ONEWIRE_PIN);
DallasTemperature sensors(&oneWire);
int LastDSValue[NDSPROBE];
#endif



//unsigned long tempLastSendProbe = 0 ;
unsigned long tempLastCheckProbe = 0 ;
unsigned long tempLastSendState = 0 ;

//unsigned long prodeSendFreq = 15; // frequency to send temperatures, in minutes
unsigned long stateSendFreq = 2000; // frequency to send temperatures, in milli
unsigned long checkProbFreq = 5*60000; //2 * 1 minutes
const byte SKEEP_MAX = 3;

//bool itsTimeToSendProbe = true;
bool itsTimeForTemp = false;
//bool itsTimeToCheck = false;
// Command group
// 0 = inputPin, 1

byte buttonPins[NB_BUTTON];
byte buttonLastState[NB_BUTTON];
byte devicePin[NB_DEVICE];
byte deviceState[NB_DEVICE];
volatile bool isStatusChanged[NB_DEVICE];
byte nbTemperatureSensor = 0;


//            _
//           | |
//   ___  ___| |_ _   _ _ __
//  / __|/ _ \ __| | | | '_ \
//  \__ \  __/ |_| |_| | |_) |
//  |___/\___|\__|\__,_| .__/
//                     | |
//                     |_|
void setup() {
	#if defined(LOG)	
	Serial.begin(115200); // Init du Port serie/USB
	logBuildVersion();
	#endif
	//prodeSendFreq *= 60000; // convert Minute to millis
	//prodeSendFreq *= 1000; // convert Minute to millis

	// setup variable table
	buttonPins [LEARN] = BT_LEARN_PIN;
	buttonPins [VMC] = BT_VMC_PIN;
	buttonPins [LIGHT] = BT_LIGHT_PIN;
	buttonPins [MIRROR] = BT_MIRROR_PIN;
	buttonPins [WC] = BT_WC_PIN;

	for (int i=0; i < NB_BUTTON; i++) {
		pinMode(buttonPins[i], INPUT_PULLUP);
		buttonLastState[i] = digitalRead(buttonPins[i]);
	    #if defined (LOG_INFO)		
		Serial.print(buttonPins[i]); Serial.print(" ");
		#endif
	}
    #if defined (LOG_INFO)		
	Serial.println(" :INPUT" );
	#endif

	devicePin [VMC] = RS_VMC_PIN;
	devicePin [LIGHT] = RS_LIGHT_PIN;
	devicePin [MIRROR] = RS_MIRROR_PIN;
	devicePin [WC] = RS_WC_LIGHT_PIN;

	for (int i=0; i<NB_DEVICE; i++) {
		pinMode(devicePin[i], OUTPUT);
		deviceState[i] = HIGH;
		digitalWrite(devicePin[i], HIGH);
		isStatusChanged[i] = true; // to send status after each restart.
		#if defined (LOG_INFO)		
		Serial.print(String(devicePin[i]) + " ");
		#endif
	}
    #if defined (LOG_INFO)		
	Serial.println(" :OUTPUT" );
	#endif

	//clearMemory();
	setupMemory();
	reloadMemory();
	//for (int i=0; i < NB_DEVICE; i++ ) reloadMemory(i);
	initMemory('R', 102); // Version Beta 1.0.1

	// setup rcSwitch to transmit and receive RF433
	pinMode(RFRX_PIN, INPUT);
	mySwitch.enableReceive(RFRX_PIN-2);

	pinMode(RFTX_PIN, OUTPUT);
	mySwitch.enableTransmit(RFTX_PIN); // Transmission sur Pin
	mySwitch.setRepeatTransmit(RADIO_REPEATS); // Repete x fois le message

	//--------------------------------------------------------------------------------------------------------------------------------------------------
	delay(1000);

	#if (NDSPROBE > 0)
	sensors.begin();
	nbTemperatureSensor = sensors.getDeviceCount();
	#if defined(LOG_INFO)		
	Serial.println("Nb DS Sensor:"); Serial.println(nbTemperatureSensor);
	#endif
	// just to avoid probleme with some sensor where the first value returned is not correct
	for (int ploop = 0 ; ploop < NDSPROBE; ploop++) {
		getDSTemperature(ploop);
	}
	#endif
	#if (NDHT > 0)	
	dhtprobe.begin();
	#endif


	#if defined(LED_PIN)
	pinMode(LED_PIN, OUTPUT);
	blinkLed(2, 10);
	#endif

	// Start
	#if defined(LOG_INFO)		
	Serial.println("start main loop");
	#endif
	/*Timer1.initialize(8388480/4); // set a timer of length 100000 microseconds (or 0.1 sec - or 10Hz => the led will blink 5 times, 5 cycles of on-and-off, per second)
	Timer1.attachInterrupt( sendStatus ); // attach the service routine here
	*/
} // End Of void setup()


//                   _         _
//                  (_)       | |
//   _ __ ___   __ _ _ _ __   | |     ___   ___  _ __
//  | '_ ` _ \ / _` | | '_ \  | |    / _ \ / _ \| '_ \
//  | | | | | | (_| | | | | | | |___| (_) | (_) | |_) |
//  |_| |_| |_|\__,_|_|_| |_| \_____/\___/ \___/| .__/
//                                              | |
//

void loop(){
	/*
	if ( ((millis() - tempLastSendProbe) > prodeSendFreq) || itsTimeForTemp ) {
		sendAllProbeValues(itsTimeForTemp);
		tempLastSendProbe, tempLastSendState, tempLastCheckProbe = millis();
		itsTimeForTemp = ! itsTimeForTemp;
		itsTimeToCheck = false;
}*/
	// manage temp / Humidity transmit 
	if ((millis() - tempLastCheckProbe) > (checkProbFreq / 2) ) {
		sendAllProbeValues(itsTimeForTemp);
		tempLastCheckProbe = millis();
		itsTimeForTemp = ! itsTimeForTemp;
	}
	// manage input button
	for (int bt=0; bt < NB_BUTTON; bt++) {
		manageInput(bt);
	}
	// manage RF reception
	if (mySwitch.available() && isMessage()) {
		remoteAction(RFLastSender, RFLastReceptor, RFOnOff);
	}
	// manage status to send
	if ((millis() - tempLastSendState) > stateSendFreq) {
		sendStatus();
		tempLastSendState = millis();
	}

	// itsTimeToSendProbe = (millis() - tempLastSendProbe) > prodeSendFreq;

}

//   _     _       _    _              _
//  | |   (_)     | |  | |            | |
//  | |__  _ _ __ | | _| |     ___  __| |
//  | '_ \| | '_ \| |/ / |    / _ \/ _` |
//  | |_) | | | | |   <| |___|  __/ (_| |
//  |_.__/|_|_| |_|_|\_\_____/\___|\__,_|
//
//
void blinkLed(int repeat, int time) {
	for (int i = 0; i < repeat; i++) {
		delay(time);
		digitalWrite(LED_PIN, HIGH);
		delay(time);
		digitalWrite(LED_PIN, LOW);
	}
}


//   _____                  _
//  |_   _|                | |
//    | | _ __  _ __  _   _| |_
//    | || '_ \| '_ \| | | | __|
//   _| || | | | |_) | |_| | |_
//   \___/_| |_| .__/ \__,_|\__|
//             | |
//             |_|

void manageInput(byte aDevice) {
	byte bState = digitalRead(buttonPins[aDevice]);
	if (bState != buttonLastState[aDevice]) {
		#if defined (LOG_INFO)
		Serial.print(" BUTTON ="); Serial.println( buttonPins[aDevice] );
		#endif
		buttonLastState[aDevice] = bState;
		doAction(aDevice, !deviceState[aDevice]);
		delay(DELAY_REBOUND);
	}
}

/*******************************************************************************
*******************************************************************************/
void remoteAction(long aSender, int aDevice, boolean aOnOff) {
	// VMC
	if (aSender == HE_IDE && aDevice < NB_DEVICE) {
		doAction(aDevice, ! aOnOff, 0);
	} else {

		for ( int i=0; i < MAXREMOTE; i++ ) {
			if (i < registeredList[VMC].totalRegistered
			        && aSender == remoteVMC[i].sender && aDevice == remoteVMC[i].receptor) {
				#if defined (LOG_INFO)
				Serial.println("Its for ME , the VMC:");
				#endif
				doAction(VMC, ! aOnOff);
			}
			if (i < registeredList[LIGHT].totalRegistered
			        && aSender == remoteLight[i].sender && aDevice == remoteLight[i].receptor) {
				#if defined (LOG_INFO)
				Serial.println("Its for ME , the LIGHT:");
				#endif		
				doAction(LIGHT, ! aOnOff);
			}
			if (i < registeredList[MIRROR].totalRegistered
			        && aSender == remoteMirror[i].sender && aDevice == remoteMirror[i].receptor) {
				#if defined (LOG_INFO)
				Serial.println("Its for ME , the MIRROR:");
				#endif		
				doAction(MIRROR, ! aOnOff);
			}
			if (i < registeredList[WC].totalRegistered
			        && aSender == remoteWC[i].sender && aDevice == remoteWC[i].receptor) {
				#if defined (LOG_INFO)
				Serial.println("Its for ME , the WC LIGHT:");
				#endif		
				doAction(WC, ! aOnOff);
			}
		}
	}
}

//      | |      / _ \     | | (_)
//    __| | ___ / /_\ \ ___| |_ _  ___  _ __
//   / _` |/ _ \|  _  |/ __| __| |/ _ \| '_ \
//  | (_| | (_) | | | | (__| |_| | (_) | | | |
//   \__,_|\___/\_| |_/\___|\__|_|\___/|_| |_|
//
void doAction(byte aDevice, bool state) {
	doAction(aDevice, state, 0);
}
/******
**  int sendDelay not used any more
**
*******/
void doAction(byte aDevice, bool state, int sendDelay) {
	switch (aDevice) {
	case LEARN:
		learnRF();
		buttonLastState[LEARN] = HIGH; // default value of the press button
		break;

	case VMC:
	case LIGHT:
	case MIRROR:
	case WC:
		//Timer1.stop();
		deviceState[aDevice] = state;
		digitalWrite(devicePin [aDevice], state );
		#if defined (LOG_DEBUG)
		Serial.print("doAction #"); Serial.print(aDevice);
		Serial.print(" state:"); Serial.println(state);
		#endif		
		//@@TODO add true timer !!
		blinkLed(3, 75); // allow arduidom to manage original RF message
		isStatusChanged[aDevice]=true;
		//delay(sendDelay);
		//send2RF(true , aDevice + DEVICE_STATE_ID , !state, PROBE_ID, false);
		#if defined (LOG_DEBUG)
		Serial.print("doAction end delay:"); Serial.println(sendDelay);
		#endif		
		//Timer1.restart();
		tempLastSendState = millis();
		RFLastAddr = 999; // reset value.
		break;

	default:
			#if defined (LOG_WARNING)
		Serial.print("doAction Unk:"); Serial.println(aDevice);
			#endif		
		break;
	}

}

/*******************************************************************************
*******************************************************************************/
void sendStatus() {
	for ( int dev = 0; dev < NB_DEVICE; dev++ ) {
		if (isStatusChanged[dev]) {
			send2RF(true , dev + DEVICE_STATE_ID , !deviceState[dev], PROBE_ID, false);
			isStatusChanged[dev]=false;
			dev = NB_DEVICE ; // to not send 2 status in same call.
		}
	}
	tempLastSendState = millis();
	#if defined (LOG_INFO)
	Serial.println("sendStatus done:");
	#endif
}



//   _____                                   _
//  |_   _|                                 | |
//    | | ___ _ __ ___  _ __   ___ _ __ __ _| |_ _   _ _ __ ___
//    | |/ _ \ '_ ` _ \| '_ \ / _ \ '__/ _` | __| | | | '__/ _ \
//    | |  __/ | | | | | |_) |  __/ | | (_| | |_| |_| | | |  __/
//    \_/\___|_| |_| |_| .__/ \___|_|  \__,_|\__|\__,_|_|  \___|
//                     | |
//                     |_|
/**
   TorH : true for temperature, false for humidity
**/
void sendAllProbeValues(boolean TorH) {
	sendAllProbeValues(TorH, false);
}
void sendAllProbeValues(boolean TorH, boolean checkLargeGap) {
	//@@TODO send only if change
	int probeID = TorH ? 0 : 1;

	#if defined (LOG_DEBUG)
	Serial.print("It's time to send probe, t=0 /h=1 :"); Serial.println(probeID);
	#endif
	byte totalValue = NDSPROBE + 2*NDHT;
	#if (NDHT > 0)
	int newValue = getDHT22Value(TorH);

	#if defined (LOG_DEBUG)
	Serial.print("newValue :"); Serial.println(newValue);
	Serial.print("lastValue[probeID] :"); Serial.println(lastValue[probeID]);
	#endif	

	long gap = 0;
	if ((lastValue[probeID] != newValue)) {
		gap = abs(lastValue[probeID] - newValue);
		 	#if defined (LOG_DEBUG)
		Serial.print("GapMin :"); Serial.println(gapMin[probeID]);
		Serial.print("gap :"); Serial.println(gap);
			#endif	
	}
	if ( gap >= 3*gapMin[probeID] // send temp when change >= 0.3° 
		 || (gap >= gapMin[probeID] && skeepCount[probeID] > SKEEP_MAX) // send low change 10 min 
		 || skeepCount[probeID] > 3*SKEEP_MAX
	    ) {
		sendProbeValue(probeID, newValue, true);
		lastValue[probeID] = newValue;
		skeepCount[probeID] = 0;
	} else {
		#if defined (LOG_DEBUG)
		Serial.print("No Change :"); Serial.println(TorH);
		Serial.print("skeepCount[probeID] :"); Serial.println(skeepCount[probeID]);
		#endif	
		skeepCount[probeID] += 1;
	}
	#endif

	#if (NDSPROBE > 0)
	if (tORh) {

		// @@TODO manage gap
		for ( int ploop = 2; ploop < totalValue; ploop++) {
			int tempValue = getDSTemperature(ploop);
			sendProbeValue(ploop, tempValue, true);
		}
	}
	#endif
}






/*******************************************************************************
*******************************************************************************/
#if (NDSPROBE > 0)
float getDSTemperature(byte probeNum) {
	// *** MORE THAN ONE RETURN ****
	float rawValue = NAN;
	if ( nbTemperatureSensor > probeNum ) {
		sensors.requestTemperatures();
		rawValue = sensors.getTempCByIndex(probeNum);
	}
	#if defined(LOG_WARNING)		
	Serial.println("DS sensor not connected");
	#endif

	if ( isnan(rawValue)  || rawValue < -10 || rawValue == 85 ) {
		return READ_ERROR;
	}
	return rawValue*100;
}
#endif

#if (NDHT > 0)
/*******************************************************************************
*******************************************************************************/
//              _  ______ _   _ _____ _____  _____
//             | | |  _  \ | | |_   _/ __  \/ __  \
//    __ _  ___| |_| | | | |_| | | | `' / /'`' / /'
//   / _` |/ _ \ __| | | |  _  | | |   / /    / /
//  | (_| |  __/ |_| |/ /| | | | | | ./ /___./ /___
//   \__, |\___|\__|___/ \_| |_/ \_/ \_____/\_____/
//    __/ |
//   |___/

/****
   TorH : true for Temperature, false for Humidity
**/
int getDHT22Value(boolean TorH) {
	// Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
	float rawValue = TorH ? dhtprobe.readTemperature() : dhtprobe.readHumidity();
	byte retry = 0;
	const byte RETRY_MAX = 10;

	while ( isnan(rawValue) && retry < RETRY_MAX) {
		delay(100);
		#if defined(LOG_WARNING)		
		Serial.print("DHT read retry temp="); Serial.println(TorH);
		#endif
		rawValue = TorH ? dhtprobe.readTemperature() : dhtprobe.readHumidity();
	}
	#if defined(LOG_INFO)		
	Serial.print("DHT v:"); Serial.println(rawValue);
	#endif

	if (isnan(rawValue)) {
		return READ_ERROR;
	}
	return rawValue*100;
}
#endif


//                      _______          _           _   _       _
//                     | | ___ \        | |         | | | |     | |
//   ___  ___ _ __   __| | |_/ / __ ___ | |__   ___ | | | | __ _| |_   _  ___
//  / __|/ _ \ '_ \ / _` |  __/ '__/ _ \| '_ \ / _ \| | | |/ _` | | | | |/ _ \
//  \__ \  __/ | | | (_| | |  | | | (_) | |_) |  __/\ \_/ / (_| | | |_| |  __/
//  |___/\___|_| |_|\__,_\_|  |_|  \___/|_.__/ \___| \___/ \__,_|_|\__,_|\___|
//
//
void sendProbeValue( byte aProbeNum, int aValue, bool aSend ) {
	int decValueD;
	bool positive = aValue > 0;
	int tempValue;
	#if defined(LOG_INFO)	
	Serial.print(">>Probe:" ); Serial.print(aProbeNum);
	Serial.print(" v:"); Serial.println(aValue, DEC);
	#endif

	// bad values returned by the sensor >-10 or 85
	if ( aValue == READ_ERROR ) {
		#if defined(LOG_INFO)		
		Serial.println("READ_ERROR");
		#endif
		tempValue = 0;
		decValueD = 0;
		positive = false;
	} else {
		// arround calculation  ex aValue = 1935 -->  19.4
		tempValue = aValue / 100; // remove decimal part tempValue = 19
		decValueD = (aValue - tempValue*100)/10; // decValueD (1935 - 1900)/10 = 3
		// decValueD= 3   tempValue = 19 -> now
		int decValueU = aValue - (tempValue*100) - (decValueD*10) ; // 1935 - 19*100 - 3*10
		if (decValueU > 4) {
			++decValueD;
		}
	}
	// return temperature to -0 in case of error
	#if defined(LOG_INFO)		
	//Serial.print("Probe sensor Value "); Serial.println( aValue, DEC);
	Serial.print(" ID: " ); Serial.print( PROBE_ID+aProbeNum, DEC);
	Serial.print(" value: " );
	Serial.print(tempValue); Serial.print("."); Serial.print(decValueD);
	Serial.print(" Signe: " ); Serial.println( positive, DEC);
	#endif
	if ( aSend ) {
		send2RF(false , tempValue, decValueD, PROBE_ID+aProbeNum, positive);
	}

}



//  ______          _ _           ___  _____  _____
//  | ___ \        | (_)         /   ||____ ||____ |
//  | |_/ /__ _  __| |_  ___    / /| |    / /    / /
//  |    // _` |/ _` | |/ _ \  / /_| |    \ \    \ \
//  | |\ \ (_| | (_| | | (_) | \___  |.___/ /.___/ /
//  \_| \_\__,_|\__,_|_|\___/      |_/\____/ \____/

bool isMessage() {
	bool ret = false;
	unsigned long lRFData = mySwitch.getReceivedValue();
	unsigned long lRFAddr = mySwitch.getReceivedAddr();

	if ( RFLastSender != lRFData || RFLastAddr != lRFAddr ) {
		#if defined(LOG_INFO)	
		Serial.println(F("MySwitch available"));
		#endif
		RFLastSender = lRFData;
		RFLastAddr = lRFAddr;
		bool lRFGroup = lRFAddr > 999;
		if (lRFGroup) {
			lRFAddr -= 1000;
		}
		RFLastReceptor =  lRFAddr % 100;
		RFOnOff = (lRFAddr - RFLastReceptor) / 100;

		#if defined(LOG_DEBUG)
		Serial.print("<<  ");
		logRFMessage(RFLastSender, lRFGroup,RFLastReceptor, RFOnOff);
        #endif
		ret = true;
	}

	mySwitch.resetAvailable();
	return ret;
}

/*******************************************************************************
*******************************************************************************/
void learnRF() {

	//@@TODO Manage unregister request.

	byte press = 0;
	bool reset = false;
	#if defined (LOG_DEBUG)
	Serial.println("Learn wait" );
	#endif
	blinkLed(5, 200);

	digitalWrite(LED_PIN, HIGH);
	while (digitalRead(buttonPins[LEARN]) == LOW) {}
	#if defined (LOG_DEBUG)
	Serial.println("Learn ready" );
	#endif
	RFLastSender = 0;
	RFLastAddr = 999;
	unsigned long initStartTimeMillis = millis();
	unsigned long currentTimeMillis = initStartTimeMillis;
	buttonLastState[LEARN] = HIGH;
	byte bState;
	while ( (millis() - initStartTimeMillis) < 5000 ) {
		bState = digitalRead(buttonPins[LEARN]);
		if ( ( bState != buttonLastState[LEARN] )
		        && ( bState == LOW ) ) {
			press++;
			digitalWrite(LED_PIN, LOW);
			initStartTimeMillis = millis();
			delay(300);
			digitalWrite(LED_PIN, HIGH);
		}
		delay(DELAY_REBOUND);
		buttonLastState[LEARN] = bState;
	}

	delay(1000);

	if (digitalRead(buttonPins[LEARN]) == LOW) {
		blinkLed(2, 10);
		digitalWrite(LED_PIN, HIGH);
		press--;
		#if defined (LOG_DEBUG)
		Serial.println("Learn reset:" + String(press));
		#endif
		reset = true;
		reloadMemory(press);
		return; //  MORE THAN ONE RETURN
	}

	if (press > 0) {
		press--;
		#if defined (LOG_DEBUG)		
		Serial.print("Learn device:"); Serial.println( press );
		#endif 
		press = press > NB_DEVICE  ? NB_DEVICE : press;

		digitalWrite(LED_PIN, LOW);

		initStartTimeMillis = millis();
		currentTimeMillis = initStartTimeMillis;
		while ( (currentTimeMillis - initStartTimeMillis) < LEARN_DELAY ) {
			if (mySwitch.available() && isMessage()) {
				if ( registeredList[press].lastRegistered ==  MAXREMOTE ) {
					registeredList[press].lastRegistered = 1;// on revient au 1er
					#if defined (LOG_DEBUG)		
					Serial.println("Learn mem full");
					#endif
				} else {
					registeredList[press].lastRegistered++;
				}
				if (registeredList[press].lastRegistered > registeredList[press].totalRegistered ) {
					registeredList[press].totalRegistered++;
				}

				remoteList[press][ registeredList[press].lastRegistered -1 ].sender = RFLastSender;
				remoteList[press][ registeredList[press].lastRegistered -1 ].receptor = RFLastReceptor;

				EEPROM.writeBlock(remoteAddr[press], remoteList[press],  MAXREMOTE);
				digitalWrite(LED_PIN, LOW);
				#if defined (LOG_DEBUG)				
				Serial.print("Learn register index:");
				Serial.println(registeredList[press].lastRegistered -1);
				#endif
				delay(300);
				digitalWrite(LED_PIN, HIGH);

				// set register index for the next time
				EEPROM.writeBlock(addrRemoteIndex, registeredList, NB_DEVICE);

			}
			currentTimeMillis = millis();

		}
	}
	blinkLed(5, 200);
	#if defined (LOG_DEBUG)				
	Serial.println("End Init");
	#endif

}

//                      _  _____ ____________
//                     | |/ __  \| ___ \  ___|
//   ___  ___ _ __   __| |`' / /'| |_/ / |_
//  / __|/ _ \ '_ \ / _` |  / /  |    /|  _|
//  \__ \  __/ | | | (_| |./ /___| |\ \| |
//  |___/\___|_| |_|\__,_|\_____/\_| \_\_|
//
//

/*******************************************************************************
*******************************************************************************/
void send2RF(boolean aFlagGroup, int aValue, int aDecValue, byte aReceiver, boolean aFlagOnOff ) {
	unsigned long senderID = 9999000 + (aValue*10)+aDecValue;
	#if defined(LOG_DEBUG)
	Serial.print("  >>");
	logRFMessage(senderID, aFlagGroup,aReceiver, aFlagOnOff);
    #endif 
    
    //Serial.println("FAKE mySwitch.send");
	for (int i = 1; i <= RADIO_REPEATS; i++) {
		mySwitch.send(senderID, aFlagGroup, aReceiver, aFlagOnOff);
	}
}


//  ___  ___
//  |  \/  |
//  | .  . | ___ _ __ ___   ___  _ __ _   _
//  | |\/| |/ _ \ '_ ` _ \ / _ \| '__| | | |
//  | |  | |  __/ | | | | | (_) | |  | |_| |
//  \_|  |_/\___|_| |_| |_|\___/|_|   \__, |
//                                     __/ |
//                                  |___/

/*******************************************************************************
*******************************************************************************/
void reloadMemory() {
	reloadMemory(-1);
}
void reloadMemory(int reset) {
	bool change = false;
	EEPROM.readBlock(addrConfig, theConfig);
	EEPROM.readBlock(addrRemoteIndex, registeredList, NB_DEVICE);
	#if defined(LOG_INFO)		
	Serial.println("totalRegistered \t lastRegistered");
	#endif

	for (int i=0; i < NB_DEVICE ; i++) {
		#if defined(LOG_INFO)				
		Serial.print(registeredList[i].totalRegistered); Serial.print(" \t\t\t ");
		Serial.println(registeredList[i].lastRegistered);
		#endif
		// manage first initialisation
		if (change || registeredList[i].totalRegistered > MAXREMOTE ) {
			registeredList[i].totalRegistered = 0;
			change = true;
		}
		if (change || registeredList[i].lastRegistered > MAXREMOTE ) {
			registeredList[i].lastRegistered = 0;
			change = true;
		}
		#if defined(LOG_INFO)
		if (change) Serial.println("Change required ");
		#endif
	}
	//   *** VMC  ***
	EEPROM.readBlock(remoteAddr[VMC], remoteVMC, MAXREMOTE);
	// manage first initialisation
	if (reset == VMC || change  ) {
		for (int j=1; j < MAXREMOTE; j++ ) {
			remoteVMC[j].sender = 0;
			remoteVMC[j].receptor = 0;
		}
		#if defined(LOG_INFO)
		Serial.println("VMC Memory Change required");
		#endif
		registeredList[VMC].totalRegistered = 0;
		registeredList[VMC].lastRegistered = 0;
		EEPROM.updateBlock(remoteAddr[VMC], remoteVMC, MAXREMOTE);
		change = true;
	}
	remoteList[VMC] = remoteVMC;

	EEPROM.readBlock(remoteAddr[LIGHT], remoteLight, MAXREMOTE);
	// manage first initialisation
	#if defined(LOG_INFO)
	if (reset > -1) Serial.print("Mem. reset for ");
	#endif

	if (reset == LIGHT || change  ) {
		for (int j=1; j < MAXREMOTE; j++ ) {
			remoteLight[j].sender = 0;
			remoteLight[j].receptor = 0;
		}
		#if defined(LOG_INFO)
		Serial.println("LIGHT");
		#endif
		registeredList[LIGHT].totalRegistered = 0;
		registeredList[LIGHT].lastRegistered = 0;

		EEPROM.updateBlock(remoteAddr[LIGHT], remoteLight, MAXREMOTE);
		change = true;
	}
	remoteList[LIGHT] = remoteLight;

	EEPROM.readBlock(remoteAddr[MIRROR], remoteMirror, MAXREMOTE);
	// manage first initialisation
	if (reset == MIRROR || change  ) {
		for (int j=1; j < MAXREMOTE; j++ ) {
			remoteMirror[j].sender = 0;
			remoteMirror[j].receptor = 0;
		}
		#if defined(LOG_INFO)
		Serial.println("MIRROR");
		#endif
		registeredList[MIRROR].totalRegistered = 0;
		registeredList[MIRROR].lastRegistered = 0;

		EEPROM.updateBlock(remoteAddr[MIRROR], remoteMirror, MAXREMOTE);
		change = true;
	}
	remoteList[MIRROR] = remoteMirror;

	EEPROM.readBlock(remoteAddr[WC], remoteWC, MAXREMOTE);
	// manage first initialisation
	if (reset == WC || change  ) {
		for (int j=1; j < MAXREMOTE; j++ ) {
			remoteWC[j].sender = 0;
			remoteWC[j].receptor = 0;
		}
		#if defined(LOG_INFO)
		Serial.println("WC");
		#endif
		registeredList[WC].totalRegistered = 0;
		registeredList[WC].lastRegistered = 0;

		EEPROM.updateBlock(remoteAddr[WC], remoteWC, MAXREMOTE);
		change = true;
	}
	remoteList[WC] = remoteWC;

	if (change) EEPROM.updateBlock(addrRemoteIndex, registeredList, NB_DEVICE);

	for (int i=0; i < NB_DEVICE ; i++) {
		#if defined (LOG_INFO)			
		Serial.println("   sender \t receptor");
		for (int j=0; j < registeredList[i].totalRegistered; j++ ) {
			Serial.print(remoteList[i][j].sender); Serial.print("\t\t");
			Serial.println(remoteList[i][j].receptor);
		}
		#endif 
	}
}

/*******************************************************************************
*******************************************************************************/
void setupMemory() {
	// setup Memory
	// /!\*********  never change order ********
	addrConfig = EEPROM.getAddress(sizeof(config_t));
	addrRemoteIndex = EEPROM.getAddress(sizeof(registeredRemote_t)*NB_DEVICE);
	remoteAddr[VMC] = EEPROM.getAddress(sizeof(remote_t)*MAXREMOTE);
	remoteAddr[LIGHT] = EEPROM.getAddress(sizeof(remote_t)*MAXREMOTE);
	remoteAddr[MIRROR] = EEPROM.getAddress(sizeof(remote_t)*MAXREMOTE);
	remoteAddr[WC] = EEPROM.getAddress(sizeof(remote_t)*MAXREMOTE);
	#if defined (LOG_INFO)		
	Serial.println("begin address \t\t size");
	Serial.print(addrRemoteIndex);Serial.print(" \t\t\t "); Serial.println(sizeof(registeredRemote_t)*NB_DEVICE);
	Serial.print(remoteAddr[VMC]);Serial.print(" \t\t\t "); Serial.println(sizeof(remote_t)*MAXREMOTE);
	Serial.print(remoteAddr[LIGHT]);Serial.print(" \t\t\t "); Serial.println(sizeof(remote_t)*MAXREMOTE);
	Serial.print(remoteAddr[MIRROR]);Serial.print(" \t\t\t "); Serial.println(sizeof(remote_t)*MAXREMOTE);
	Serial.print(remoteAddr[WC]);Serial.print(" \t\t\t "); Serial.println(sizeof(remote_t)*MAXREMOTE);
    #endif
}



/*******************************************************************************
*******************************************************************************/
void initMemory(char lID, byte lVersion) {
	//  /!\ *** MORE THAN one RETURN
	if (theConfig.id == lID && theConfig.version == lVersion) {
		#if defined(LOG_INFO)		
		Serial.println("initMemory not required ");
		#endif
		return;
	}
	#if defined(LOG_WARNING)		
	Serial.println("initMemory required");
	#endif
	theConfig.id = lID;
	theConfig.version = lVersion;
	EEPROM.writeBlock(addrConfig, theConfig);
}


/*******************************************************************************
*******************************************************************************/
void clearMemory() {

	Serial.println(EEPROMSizeNano);
	Serial.println(EEPROMSizeATmega328);

	/*
	 for (int i = 0 ; i < EEPROM.length() ; i++) {
	   EEPROM.write(i, 0);
	 }
	*/
}


//  ______       _ _     _     ___   _               _
//  | ___ \     (_) |   | |   / / | | |             (_)
//  | |_/ /_   _ _| | __| |  / /| | | | ___ _ __ ___ _  ___  _ __
//  | ___ \ | | | | |/ _` | / / | | | |/ _ \ '__/ __| |/ _ \| '_ \
//  | |_/ / |_| | | | (_| |/ /  \ \_/ /  __/ |  \__ \ | (_) | | | |
//  \____/ \__,_|_|_|\__,_/_/    \___/ \___|_|  |___/_|\___/|_| |_|
//
//

/*******************************************************************************
*******************************************************************************/
#if defined (LOG)
void logBuildVersion (void) {
	String the_path = __FILE__;
	int slash_loc = the_path.lastIndexOf('/');
	String the_cpp_name = the_path.substring(slash_loc+1);
	int dot_loc = the_cpp_name.lastIndexOf('.');
	String the_sketchname = the_cpp_name.substring(0, dot_loc);
	Serial.print("\nSketch: "); Serial.print(the_sketchname);
	Serial.print(" build:"); Serial.print(__DATE__);
	Serial.print(" / "); Serial.print(__TIME__);
	Serial.println("\n start setup");
}

/*******************************************************************************
*******************************************************************************/
void logRFMessage(unsigned long aSender, byte aGroup, byte aReceptor, byte aOnOff ) {
	Serial.print(aSender);
	Serial.print(" G:");Serial.print(aGroup);
	Serial.print(" R:");Serial.print(aReceptor);
	Serial.print(" o:");Serial.println(aOnOff);
}
#endif
// do: CPzzrtyyooiizzzzzzzzzzcczzzzdczzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz

/* memory structure
#define MAXREMOTE 6
byte totalRegistered[NBRELAIS];
byte remoteNumber[
6 remote nbr per devive 






*/
